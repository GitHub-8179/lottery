<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sjc.lottery.lottery.dao.LotteryDetailMapper">
  <resultMap id="BaseResultMap" type="com.sjc.lottery.lottery.entity.LotteryDetail">
    <result column="LOTTERY_DETAIL_ID" jdbcType="INTEGER" property="lotteryDetailId" />
    <result column="LOTTERY_ID" jdbcType="INTEGER" property="lotteryId" />
    <result column="GRADE_TYPE" jdbcType="TINYINT" property="gradeType" />
    <result column="GRADE_NUMBER" jdbcType="INTEGER" property="gradeNumber" />
    <result column="GRADE_MONEY" jdbcType="INTEGER" property="gradeMoney" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    LOTTERY_DETAIL_ID, LOTTERY_ID, GRADE_TYPE, GRADE_NUMBER, GRADE_MONEY
  </sql>
  <select id="selectByExample" parameterType="com.sjc.lottery.lottery.entity.LotteryDetailExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from p_lottery_detail
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <insert id="insert" parameterType="com.sjc.lottery.lottery.entity.LotteryDetail">
    insert into p_lottery_detail (LOTTERY_DETAIL_ID, LOTTERY_ID, GRADE_TYPE, 
      GRADE_NUMBER, GRADE_MONEY)
    values (#{lotteryDetailId,jdbcType=INTEGER}, #{lotteryId,jdbcType=INTEGER}, #{gradeType,jdbcType=TINYINT}, 
      #{gradeNumber,jdbcType=INTEGER}, #{gradeMoney,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.sjc.lottery.lottery.entity.LotteryDetail">
    insert into p_lottery_detail
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="lotteryDetailId != null">
        LOTTERY_DETAIL_ID,
      </if>
      <if test="lotteryId != null">
        LOTTERY_ID,
      </if>
      <if test="gradeType != null">
        GRADE_TYPE,
      </if>
      <if test="gradeNumber != null">
        GRADE_NUMBER,
      </if>
      <if test="gradeMoney != null">
        GRADE_MONEY,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="lotteryDetailId != null">
        #{lotteryDetailId,jdbcType=INTEGER},
      </if>
      <if test="lotteryId != null">
        #{lotteryId,jdbcType=INTEGER},
      </if>
      <if test="gradeType != null">
        #{gradeType,jdbcType=TINYINT},
      </if>
      <if test="gradeNumber != null">
        #{gradeNumber,jdbcType=INTEGER},
      </if>
      <if test="gradeMoney != null">
        #{gradeMoney,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update p_lottery_detail
    <set>
      <if test="record.lotteryDetailId != null">
        LOTTERY_DETAIL_ID = #{record.lotteryDetailId,jdbcType=INTEGER},
      </if>
      <if test="record.lotteryId != null">
        LOTTERY_ID = #{record.lotteryId,jdbcType=INTEGER},
      </if>
      <if test="record.gradeType != null">
        GRADE_TYPE = #{record.gradeType,jdbcType=TINYINT},
      </if>
      <if test="record.gradeNumber != null">
        GRADE_NUMBER = #{record.gradeNumber,jdbcType=INTEGER},
      </if>
      <if test="record.gradeMoney != null">
        GRADE_MONEY = #{record.gradeMoney,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update p_lottery_detail
    set LOTTERY_DETAIL_ID = #{record.lotteryDetailId,jdbcType=INTEGER},
      LOTTERY_ID = #{record.lotteryId,jdbcType=INTEGER},
      GRADE_TYPE = #{record.gradeType,jdbcType=TINYINT},
      GRADE_NUMBER = #{record.gradeNumber,jdbcType=INTEGER},
      GRADE_MONEY = #{record.gradeMoney,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>